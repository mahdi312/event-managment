version: '3.8'
services:
  user-db:
    image: postgres:15-alpine
    container_name: user-db
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5431:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data
      - ./user-service/src/main/resources/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 10s
      timeout: 5s
      retries: 5

  event-db:
    image: postgres:15-alpine
    container_name: event-db
    environment:
      POSTGRES_DB: event_db
      POSTGRES_USER: eventuser
      POSTGRES_PASSWORD: eventpassword
    ports:
      - "5432:5432"
    volumes:
      - event_db_data:/var/lib/postgresql/data
      - ./event-service/src/main/resources/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eventuser"]
      interval: 10s
      timeout: 5s
      retries: 5

  ticketing-db:
    image: postgres:15-alpine
    container_name: ticketing-db
    environment:
      POSTGRES_DB: ticketing_db
      POSTGRES_USER: ticketuser
      POSTGRES_PASSWORD: ticketpassword
    ports:
      - "5433:5432"
    volumes:
      - ticketing_db_data:/var/lib/postgresql/data
      - ./ticketing-service/src/main/resources/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ticketuser"]
      interval: 10s
      timeout: 5s
      retries: 5


  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5


  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: prod
    depends_on:
      zookeeper:
        condition: service_started
      kafka:
        condition: service_started

  zipkin:
    image: openzipkin/zipkin:2.24
    container_name: zipkin
    ports:
      - "9411:9411"


  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-db:5432/user_db
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      APPLICATION_SECURITY_JWT_SECRET_KEY: 404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
    depends_on:
      user-db:
        condition: service_healthy
      eureka-server:
        condition: service_started

  event-service:
    build:
      context: ./event-service
      dockerfile: Dockerfile
    container_name: event-service
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://event-db:5432/event_db
      SPRING_DATASOURCE_USERNAME: eventuser
      SPRING_DATASOURCE_PASSWORD: eventpassword
      APPLICATION_SECURITY_JWT_SECRET_KEY: 404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
    depends_on:
      event-db:
        condition: service_healthy
      eureka-server:
        condition: service_started

  ticketing-service:
    build:
      context: ./ticketing-service
      dockerfile: Dockerfile
    container_name: ticketing-service
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://ticketing-db:5432/ticketing_db
      SPRING_DATASOURCE_USERNAME: ticketuser
      SPRING_DATASOURCE_PASSWORD: ticketpassword
      APPLICATION_SECURITY_JWT_SECRET_KEY: 404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EVENT_SERVICE_URL: http://event-service:8082
    depends_on:
      ticketing-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      event-service:
        condition: service_started
      eureka-server:
        condition: service_started

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_CONSUMER_GROUP_ID: notification-group
      USER_SERVICE_URL: http://user-service:8081
      SPRING_MAIL_HOST: smtp.mailtrap.io
      SPRING_MAIL_PORT: 2525
      SPRING_MAIL_USERNAME: mahdi_mostafavi2011@yahoo.com
      SPRING_MAIL_PASSWORD: Hamishe31@312
    depends_on:
      kafka:
        condition: service_healthy
      user-service:
        condition: service_started
      eureka-server:
        condition: service_started

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      APPLICATION_SECURITY_JWT_SECRET_KEY: 404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
    depends_on:
      eureka-server:
        condition: service_started
      user-service:
        condition: service_started
      event-service:
        condition: service_started
      ticketing-service:
        condition: service_started

volumes:
  user_db_data:
  event_db_data:
  ticketing_db_data: